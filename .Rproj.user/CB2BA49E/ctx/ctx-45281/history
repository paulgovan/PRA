# install.packages("hexSticker")
# install.packages("ggplot2")
library(hexSticker)
library(ggplot2)
# Create a simple bar chart for the sticker
plot <- ggplot(data.frame(x = factor(c("Low", "Medium", "High")), y = c(0.3, 0.5, 0.4)), aes(x, y)) +
geom_bar(stat = "identity", fill = c("green", "yellow", "red")) +
theme_void() +
theme_transparent() +
theme(legend.position = "none")
# Create the sticker
sticker(plot,
package = "PRA",
p_size = 20,        # Package name font size
s_size = 10,        # Subtitle font size
s_x = 1,            # Subtitle x position
s_y = 0.6,          # Subtitle y position
s_color = "darkblue",  # Subtitle color
h_fill = "lightblue",  # Hexagon fill color
h_color = "black",     # Hexagon border color
p_color = "darkblue",  # Package name color
filename = "pra_hex_sticker.png")
# Display the sticker
sticker
source("~/Documents/PRA/inst/hexSticker.R")
usethis::use_cran_badge()
usethis::use_coverage(type = "codecov")
usethis::use_test("mcs.R")
set.seed(123)  # For reproducibility
task_dists <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 10, c = 15),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12),  # Task C: Uniform distribution
)
task_distributions <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 10, c = 15),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
results <- mcs(num_simulations, task_distributions)
results <- mcs(num_simulations, task_distributions)
usethis::use_test("mcs.R")
usethis::use_test("contingency.R")
generate_simulation_results <- function() {
set.seed(123) # Set seed for reproducibility
num_sims <- 1000
total_distribution <- rnorm(num_sims, mean = 100, sd = 15)
list(total_distribution = total_distribution)
}
sims <- generate_simulation_results()
result <- contingency(sims)
result
num_sims <- 10000
task_dists <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 10, c = 15),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
results <- mcs(num_sims, task_dists)
cor_mat <- matrix(c(
1, 0.5, 0.3,
0.5, 1, 0.4,
0.3, 0.4, 1
), nrow = 3, byrow = TRUE)
results <- mcs(num_sims, task_dists, cor_mat)
contingency <- contingency(results, phigh = 0.95, pbase = 0.50)
contingency
??expect_error
result <- contingency(sims, phigh = 0.50, pbase = 0.50)
result
result <- contingency(sims, phigh = 0.25, pbase = 0.75)
usethis::use_test("sensitivity.R")
usethis::use_test("dsm.R")
sm <- matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2)
rm <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
result <- grandparent_dsm(sm, rm)
is.matrix(result)
dim(result)
result
matrix(c(10, 14, 14, 20), nrow = 2, ncol = 2)
sm <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)
result <- parent_dsm(sm)
result
usethis::use_test("evm.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
usethis::use_logo("inst/logo.png")
usethis::use_github_pages()
pkgdown::build_site()
pkgdown::build_site()
install.packages("minpack.lm")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Example usage
data <- data.frame(time = 1:10, completion = c(5, 15, 40, 60, 70, 75, 80, 85, 90, 95))
fits <- fit_sigmoidal_curves(data, "time", "completion")
predictions <- predict_sigmoidal_curves(fits, seq(min(data$time), max(data$time), length.out = 100))
source("~/.active-rstudio-document")
# Example usage
data <- data.frame(time = 1:10, completion = c(5, 15, 40, 60, 70, 75, 80, 85, 90, 95))
fit <- fit_sigmoidal_curve(data, "time", "completion", "logistic")
predictions <- predict_sigmoidal_curve(fit, seq(min(data$time), max(data$time), length.out = 100), "logistic")
plot_sigmoidal_curve(data, "time", "completion", predictions, "logistic")
fit
?mutate
new_data$pred <- predict(fit, newdata = new_data)
new_data <- data.frame(x = x_range)
fit
x_range <- seq(min(data$time), max(data$time)
x_range <- seq(min(data$time), max(data$time), length.out = 100)
new_data <- data.frame(x = x_range)
new_data$pred <- predict(fit, newdata = new_data)
confint <- predict(fit, newdata = new_data, interval = "confidence")
confint
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
head(data)
head(predictions)
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
p <- ggplot2::ggplot(data, aes_string(x = time, y = completion)) +
ggplot2::geom_point() +
ggplot::geom_line(data = predictions, aes(x = x, y = pred), color = "red") +
ggplot2::labs(title = paste("Fitted", model_type),
x = "time", y = "completion %") +
ggplot2::theme_minimal()
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
p <- ggplot2::ggplot(data, aes_string(x = "time", y = "completion")) +
ggplot2::geom_point() +
ggplot2::geom_line(data = predictions, aes(x = x, y = pred), color = "red") +
ggplot2::labs(title = "Fitted Logistic Model", x = "time", y = "completion %") +
ggplot2::theme_minimal()
p
type(fit)
fit
typeof(fit)
new_data
help(predict)
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
help("aes")
usethis::use_test()
usethis::use_release_issue()
usethis::use_cran_comments()
usethis::use_github_links()
usethis::use_github_links(overwrite = TRUE)
urlchecker::url_check()
urlchecker::url_check()
urlchecker::url_check()
urlchecker::url_check()
devtools::build_readme()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
help("bibentry")
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::check_win_devel()
source("~/.active-rstudio-document")
help("rgb")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
sm <- matrix(c(1, 1, 0, 0, 1, 0, 0, 1, 1), nrow = 3, ncol = 3)
sm
rm <- matrix(c(1, 1, 1, 1, 0, 0), nrow = 2, ncol = 3)
rm
t(rm)
tm <- sm %*% t(rm)
tm
parent_dsm <- sm %*% t(sm)
parent_dsm
grandparent_dsm <- tm %*% t(tm)
grandparent_dsm
T <- matrix(c(1, 2, 0, 1, 2, 0), nrow = 3, ncol = 2)
T
G <- matrix(c(2, 2, 0, 2, 2, 0, 0, 0, 0), nrow = 3, ncol = 3)
G
S <- matrix(c(1, 1, 0, 0, 1, 0, 0, 1, 1), nrow = 3, ncol = 3)
R <- matrix(c(1, 1, 1, 1, 0, 0), nrow = 2, ncol = 3)
S
R
t <- S %*% t(R)
t
t %*% t(t)
T <- matrix(c(1, 2, 0, 1, 2, 0), nrow = 3, ncol = 2)
G <- T %*% t(T)
G
# Define the matrix T
T <- matrix(c(1, 2, 0, 1, 2, 0), nrow = 3, ncol = 2)
# Derive the matrix G by multiplying T and its transpose
G <- T %*% t(T)
# Print the matrix G
print(G)
# Define the matrix T
T <- matrix(c(1, 2, 0, 1, 2, 0), nrow = 3, ncol = 2)
# Derive the matrix G by multiplying T and its transpose
G <- T * t(T)
G <- matrix(c(2, 4, 0, 4, 8, 0, 0, 0, 0), nrow = 3, ncol = 3)
G
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
usethis::use_github_release()
usethis::use_version('minor')
devtools::submit_cran()
help(barchart)
??barchart
help("barplot")
task_dists <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 15, c = 10),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
sensitivity_results <- sensitivity(task_dists, cor_mat)
sensitivity_results <- sensitivity(task_dists, cor_mat)
sensitivity_results
barplot(sensitivity_results ~ Tasks = ('A', 'B', 'C'))
sensitivity_results <- cbind(Tasks = c('A', 'B', 'C'), Sensitivity = sensitivity(task_dists, cor_mat))
sensitivity_results
pkgdown::build_site_github_pages()
data = sensitivity_results
data
sensitivity_results <- sensitivity(task_dists, cor_mat)
library(PRA)
sensitivity_results <- sensitivity(task_dists, cor_mat)
sensitivity_results
data <- data.frame(
Tasks = c('A', 'B', 'C'),
Sensitivity = sensitivity_results
)
data
barplot(height=data$Sensitivity, names=data$Tasks,
col='skyblue',
horiz=T, las=1
)
barplot(height=data$Sensitivity, names=data$Tasks,
col='skyblue'
)
help("barplot")
barplot(height=data$Sensitivity, names=data$Tasks, col='skyblue',
horiz=TRUE, xlab = 'Sensitivity', ylab = 'Tasks')
pkgdown::build_site_github_pages()
pkgdown::clean_site()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
pkgdown::clean_site()
pkgdown::build_site_github_pages()
pkgdown::build_site()
pkgdown::build_site_github_pages()
usethis::use_vignette("evm")
usethis::use_vignette("sigmoidal")
usethis::use_vignette("RbA")
distributions <- list(
normal = function(n) rnorm(n, mean = 0, sd = 1),
uniform = function(n) runif(n, min = 0, max = 1),
exponential = function(n) rexp(n, rate = 1),
poisson = function(n) rpois(n, lambda = 1),
binomial = function(n) rbinom(n, size = 10, prob = 0.5)
)
# Function to generate random samples and calculate correlation matrix
cor_matrix <- function(num_samples = 100, num_variables = 5, distributions = distributions) {
# Initialize a matrix to store the samples
samples <- matrix(0, nrow = num_samples, ncol = num_variables)
# Randomly select distributions and generate samples
for (i in 1:num_variables) {
dist_name <- sample(names(distributions), 1)
samples[, i] <- distributions[[dist_name]](num_samples)
}
# Calculate the correlation matrix
cor_matrix <- cor(samples)
return(cor_matrix)
}
# Load necessary library
library(MASS)
# List of probability distributions
dists <- list(
normal = function(n) rnorm(n, mean = 0, sd = 1),
uniform = function(n) runif(n, min = 0, max = 1),
exponential = function(n) rexp(n, rate = 1),
poisson = function(n) rpois(n, lambda = 1),
binomial = function(n) rbinom(n, size = 10, prob = 0.5)
)
source("~/Documents/PRA/R/cormat.R")
# Function to generate random samples and calculate correlation matrix
cor_matrix <- function(num_samples = 100, num_vars = 5, dists = dists) {
# Initialize a matrix to store the samples
samples <- matrix(0, nrow = num_samples, ncol = num_vars)
# Randomly select distributions and generate samples
for (i in 1:num_vars) {
dist_name <- sample(names(dists), 1)
samples[, i] <- dists[[dist_name]](num_samples)
}
# Calculate the correlation matrix
cor_matrix <- cor(samples)
return(cor_matrix)
}
source("~/Documents/PRA/R/cormat.R")
usethis::use_test("cormat")
cor_matrix(num_samples = 100, num_vars = 5, dists = "not a list")
usethis::use_release_issue()
?gh_token_help
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::use_release_issue()
urlchecker::url_check()
devtools::build_readme()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::submit_cran()
devtools::submit_cran()
help("barplot")
source("~/Documents/PRA/R/evm.R")
devtools::load_all(".")
bac <- 100000
schedule <- c(0.1, 0.2, 0.4, 0.7, 1.0)
time_period <- 3
actual_costs <- c(9000, 18000, 36000)
time_period <- c(1, 2, 3)
actual_per_complete <- c(0.05, 0.15, 0.35)
pv <- sapply(1:3, function(t) pv(bac, schedule, t))
ac <- sapply(1:3, function(t) pv(actual_costs, time_period, t))
ev <- sapply(1:3, function(t) pv(bac, actual_per_complete, t))
data <- data.frame(
time_period,
PV = pv,
AC = ac,
EV = ev
)
data
pv <- sapply(1:3, function(t) pv(bac, schedule, t))
ac <- sapply(1:3, function(t) ac(actual_costs, time_period, t))
pv <- sapply(1:3, function(t) pv(bac, schedule, t))
ac <- actual_costs
ev <- sapply(1:3, function(t) ev(bac, actual_per_complete, t))
ev(bac, actual_per_complete)
pv(bac, schedule)
time_period <- c(1, 2, 3)
actual_per_complete <- c(0.05, 0.15, 0.35)
pv <- pv(bac, schedule)
ac <- actual_costs
ev <- ev(bac, actual_per_complete)
# Create a data frame for easier plotting
data <- data.frame(
time_period,
PV = pv,
AC = ac,
EV = ev
)
pv
time_period <- c(1, 2, 3)
actual_per_complete <- c(0.05, 0.15, 0.35)
pv <- sapply(1:3, function(t) pv(bac, schedule, t))
ac <- actual_costs
ev <- ev(bac, actual_per_complete)
# Create a data frame for easier plotting
data <- data.frame(
time_period,
PV = pv,
AC = ac,
EV = ev
)
data
risk_prob <- 0.4
mean_given_risk <- 10000
sd_given_risk <- 2000       # Standard deviation of resource cost A given R
eval_values <- seq(0, 20000, by = 1000) # Range of A values to evaluate
pdf <- sapply(eval_values, resource_pdf,
risk_prob = risk_prob,
mean_given_risk = mean_given_risk,
sd_given_risk = sd_given_risk)
source("~/Documents/PRA/R/inference.R")
risk_prob <- 0.4
mean_given_risk <- 10000
sd_given_risk <- 2000       # Standard deviation of resource cost A given R
eval_values <- seq(0, 20000, by = 1000) # Range of A values to evaluate
pdf <- sapply(eval_values, resource_pdf,
risk_prob = risk_prob,
mean_given_risk = mean_given_risk,
sd_given_risk = sd_given_risk)
barplot(
height = pdf,
names.arg = eval_values,
space = 0,
xlab = "Resource Cost (A)",
ylab = "Probability Density",
main = "Histogram of Resource Cost",
col = "skyblue",
border = "blue"
)
pdf_normalized <- pdf / sum(pdf * diff(eval_values)[1])
risk_prob <- 0.4
mean_given_risk <- 10000
sd_given_risk <- 2000       # Standard deviation of resource cost A given R
eval_values <- seq(0, 20000, by = 1000) # Range of A values to evaluate
pdf <- sapply(eval_values, resource_pdf,
risk_prob = risk_prob,
mean_given_risk = mean_given_risk,
sd_given_risk = sd_given_risk)
barplot(
height = pdf_normalized,
names.arg = eval_values,
space = 0,
xlab = "Resource Cost (A)",
ylab = "Probability Density",
main = "Histogram of Resource Cost",
col = "skyblue",
border = "blue"
)
pdf
eval_values
risk_prob <- 0.6
mean_given_risk <- 10000
sd_given_risk <- 2000       # Standard deviation of resource cost A given R
eval_values <- seq(0, 20000, by = 1000) # Range of A values to evaluate
pdf <- sapply(eval_values, resource_pdf,
risk_prob = risk_prob,
mean_given_risk = mean_given_risk,
sd_given_risk = sd_given_risk)
barplot(
height = pdf_normalized,
names.arg = eval_values,
space = 0,
xlab = "Resource Cost (A)",
ylab = "Probability Density",
main = "Histogram of Resource Cost",
col = "skyblue",
border = "blue"
)
pdf_normalized <- pdf / sum(pdf * diff(eval_values)[1])
risk_prob <- 0.6
mean_given_risk <- 10000
sd_given_risk <- 2000       # Standard deviation of resource cost A given R
eval_values <- seq(0, 20000, by = 1000) # Range of A values to evaluate
pdf <- sapply(eval_values, resource_pdf,
risk_prob = risk_prob,
mean_given_risk = mean_given_risk,
sd_given_risk = sd_given_risk)
barplot(
height = pdf_normalized,
names.arg = eval_values,
space = 0,
xlab = "Resource Cost (A)",
ylab = "Probability Density",
main = "Histogram of Resource Cost",
col = "skyblue",
border = "blue"
)
source("~/.active-rstudio-document")
barplot(
height = pdf_normalized,
names.arg = eval_values,
space = 0,
xlab = "Resource Cost (A)",
ylab = "Probability Density",
main = "Histogram of Resource Cost",
col = "skyblue",
border = "blue"
)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
head(pdf)
head(eval_values)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
head(task1_samples)
head(task2_samples)
head(task3_samples)
head(samples)
cause_probs <- c(0.3, 0.2)                # Probabilities of C1 and C2
risks_given_causes <- c(0.8, 0.6)         # P(R | C1), P(R | C2)
risks_given_not_causes <- c(0.2, 0.4)     # P(R | not C1), P(R | not C2)
risk_prob <- risk_prob_multiple(cause_probs, risks_given_causes, risks_given_not_causes)
cause_probs <- c(0.3, 0.2)                # Probabilities of C1 and C2
risks_given_causes <- c(0.8, 0.6)         # P(R | C1), P(R | C2)
risks_given_not_causes <- c(0.2, 0.4)     # P(R | not C1), P(R | not C2)
risk_prob <- risk_prob(cause_probs, risks_given_causes, risks_given_not_causes)
print(risk_prob)  # Outputs the total probability of R
help("seq_along")
source("~/.active-rstudio-document")
usethis::use_test("inference")
usethis::use_test("learning")
devtools::load_all(".")
rm(list = c("cor_matrix", "cpi", "cv", "eac", "spi", "sv"))
devtools::load_all(".")
