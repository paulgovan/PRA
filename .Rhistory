total_var <- sum(sd^2)
return(total_var)
}
smv(sd = sd)
sd^2
smv <- function(sd) {
total_var <- sum(sd)
return(total_var)
}
smv(sd = sd)
smv <- function(sd) {
total_sd <- sqrt(sum(sd^2))
return(total_var)
}
smv(sd = sd)
smv <- function(sd) {
total_var <- sqrt(sum(sd^2))
return(total_var)
}
smv(sd = sd)
smm <- function(mean, var, cov) {
# Check if the mean and variance vectors have the same length
if (length(mean) != length(var)) {
stop("The mean and variance vectors must have the same length.")
}
# Check if the covariance matrix is square and of the same length as the mean
# and variance vectors
if (!is.matrix(cov) || nrow(cov) != length(mean) || ncol(cov) != length(mean)) {
stop("The covariance matrix must be square and of the same length as the mean
and variance vectors")
# Calculate the total mean
total_mean <- sum(mean)
# Calculate the total variance
total_var <- sum(var) + sum(cov[upper.tri(cov)] *2)
# Return a list with the results
result <- list(total_mean, total_var, total_std = sqrt(total_var))
return(result)
}
}
mean <- c(10, 15, 20)
var <- c(4, 9, 16)
cov <- matrix(c(4, 1, 0.5, 1, 9, 2, 0.5, 2, 16), nrow = 3, byrow = TRUE)
smm(mean, var, cov)
print(result)
result <- smm(mean, var, cov)
result
source("~/Documents/PRA/R/sm.R")
source("~/Documents/PRA/R/sm.R")
mean <- c(10, 15, 20)
var <- c(4, 9, 16)
cov <- matrix(c(4, 1, 0.5, 1, 9, 2, 0.5, 2, 16), nrow = 3, byrow = TRUE)
result <- smm(mean, var, cov)
result
source("~/Documents/PRA/R/sm.R")
mean <- c(10, 15, 20)
var <- c(4, 9, 16)
cov <- matrix(c(4, 1, 0.5, 1, 9, 2, 0.5, 2, 16), nrow = 3, byrow = TRUE)
result <- smm(mean, var, cov)
result
result$total_mean
#' cat("Standard Deviation of Total Duration:", results$sd_duration, "\n")
#' cat("5th Percentile:", results$percentiles[1], "\n")
#' cat("Median (50th Percentile):", results$percentiles[2], "\n")
#' cat("95th Percentile:", results$percentiles[3], "\n")
#'
#' hist(results$total_duration, breaks = 50, main = "Distribution of Total Project Duration",
#'   xlab = "Total Duration", col = "skyblue", border = "white")
#' @import mc2d
#' @export
#' # Load necessary library
library(mc2d)
source("~/Documents/PRA/R/mcs.R")
install.packages("mc2d")
library(mc2d)
source("~/Documents/PRA/R/mcs.R")
num_simulations <- 10000
task_distributions <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 15, c = 10),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)results <- mcs(num_simulations, task_distributions)
num_simulations <- 10000
task_distributions <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 15, c = 10),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
results <- mcs(num_simulations, task_distributions)
source("~/Documents/PRA/R/mcs.R")
results <- mcs(num_simulations, task_distributions)
source("~/Documents/PRA/R/mcs.R")
results <- mcs(num_simulations, task_distributions)
source("~/Documents/PRA/R/mcs.R")
task_distributions <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 10, c = 15),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
results <- mcs(num_simulations, task_distributions)
cat("Mean Total Duration:", results$mean_duration, "\n")
cat("Mean Total:", results$total_mean, "\n")
cat("Variance of Total:", results$total_variance, "\n")
cat("Standard Deviation of Total:", results$total_sd, "\n")
cat("5th Percentile:", results$percentiles[1], "\n")
cat("Median (50th Percentile):", results$percentiles[2], "\n")
cat("95th Percentile:", results$percentiles[3], "\n")
hist(results$total_duration, breaks = 50, main = "Distribution of Total Project Duration", xlab = "Total Duration", col = "skyblue", border = "white")
hist(results$total_distribution, breaks = 50, main = "Distribution of Total Project Duration", xlab = "Total Duration", col = "skyblue", border = "white")
source("~/Documents/PRA/R/contingency.R")
num_simulations <- 10000
task_distributions <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 10, c = 15),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
results <- mcs(num_simulations, task_distributions)
source("~/Documents/PRA/R/mcs.R")
results <- mcs(num_simulations, task_distributions)
library(mc2d)
results <- mcs(num_simulations, task_distributions)
contingency <- contingency(results, high_percentile = 0.95, base_percentile = 0.50)
cat("Contingency based on 95th percentile and 50th percentile:", contingency, "\n")
source("~/Documents/PRA/R/sensitivity.R")
source("~/Documents/PRA/R/mcs.R")
task_distributions <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 15, c = 10),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
correlation_matrix <- matrix(c(
1, 0.5, 0.3,
0.5, 1, 0.4,
0.3, 0.4, 1
), nrow = 3, byrow = TRUE)
sensitivity_results <- sensitivity(task_distributions, correlation_matrix)
cat("Sensitivity of the variance in total cost with respect to the variance in each task cost:\n")
print(sensitivity_results)
install.packages("MASS")
source("~/Documents/PRA/R/mcs.R")
num_simulations <- 10000
task_distributions <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 10, c = 15),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
correlation_matrix <- matrix(c(
1, 0.5, 0.3,
0.5, 1, 0.4,
0.3, 0.4, 1
), nrow = 3, byrow = TRUE)
results <- mcs(num_simulations, task_distributions, correlation_matrix)
library(mc2d)
library(MASS)
results <- mcs(num_simulations, task_distributions, correlation_matrix)
source("~/Documents/PRA/R/mcs.R")
results <- mcs(num_simulations, task_distributions, correlation_matrix)
source("~/Documents/PRA/R/mcs.R")
results <- mcs(num_simulations, task_distributions, correlation_matrix)
cat("Mean Total Duration:", results$total_mean, "\n")
cat("Variance of Total Variance:", results$total_variance, "\n")
cat("Standard Deviation of Total Duration:", results$total_sd, "\n")
cat("5th Percentile:", results$percentiles[1], "\n")
cat("Median (50th Percentile):", results$percentiles[2], "\n")
cat("95th Percentile:", results$percentiles[3], "\n")
hist(results$total_distribution, breaks = 50, main = "Distribution of Total Project Duration",
xlab = "Total Duration", col = "skyblue", border = "white")
source("~/Documents/PRA/R/evm.R")
source("~/Documents/PRA/R/evm.R")
source("~/Documents/PRA/R/evm.R")
source("~/Documents/PRA/R/evm.R")
# Example matrices
sm <- matrix(c(1, 0, 0, 1, 1, 1, 0, 0, 1), nrow = 3, ncol = 3)
sm
source("~/Documents/PRA/R/dsm.R")
source("~/Documents/PRA/R/dsm.R")
source("~/Documents/PRA/R/dsm.R")
source("~/Documents/PRA/R/dsm.R")
tm <- sm %*% t(rm)
tm
grandparent_dsm <- tm %*% t(tm)
grandparent_dsm
source("~/Documents/PRA/R/dsm.R")
sm <- matrix(c(1, 1, 0, 0, 1, 0, 0, 1, 1), nrow = 3, ncol = 3)
resource_dsm <- parent_dsm(sm)
cat("\nResource-based 'Parent' DSM:\n")
print(resource_dsm)
risk_dsm <- grandparent_dsm(sm, rm)
cat("\nRisk-based 'Grandparent' DSM:\n")
print(risk_dsm)
install.packages("usethis")
usethis::use_news_md()
usethis::use_news_md()
usethis::use_news_md()
usethis::use_news_md()
usethis::use_cran_comments()
urlchecker::url_check()
install.packages("urlchecker")
urlchecker::url_check()
devtools::build_readme()
install.packages("devtools")
devtools::build_readme()
install.packages("learnr")
install.packages("roxygen2")
??quantile
install.packages("MASS")
source("~/Documents/PRA/R/contingency.R")
num_simulations <- 10000
task_distributions <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 10, c = 15),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
results <- mcs(num_simulations, task_distributions)
source("~/Documents/PRA/R/mcs.R")
results <- mcs(num_simulations, task_distributions)
correlation_matrix <- matrix(c(
1, 0.5, 0.3,
0.5, 1, 0.4,
0.3, 0.4, 1
), nrow = 3, byrow = TRUE)
results <- mcs(num_simulations, task_distributions)
results <- mcs(num_simulations, task_distributions, correlation_matrix)
contingency <- contingency(results, high_percentile = 0.95, base_percentile = 0.50)
cat("Contingency based on 95th percentile and 50th percentile:", contingency)
usethis::use_mit_license()
usethis::use_citation()
usethis::use_code_of_conduct()
usethis::use_code_of_conduct("paul.govan2@gmail.com")
usethis::use_readme_rmd()
usethis::use_lifecycle_badge('experimental')
usethis::use_pkgdown()
usethis::use_pkgdown_github_pages()
gh_token_help()
usethis::gh_token_help()
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
mean <- c(10, 15, 20)
var <- c(4, 9, 16)
usethis::use_vignette()
usethis::use_vignette("SMM", "Second Moment Method")
usethis::use_testthat()
usethis::use_test()
usethis::use_test("contingency")
import matplotlib.pyplot as plt
install.packages("hexSticker")
mean <- c(10, 15, 20)
var <- c(4, 9, 16)
results <- smm(mean, var)
mean <- c(10, 15, 20)
var <- c(4, 9, 16)
results <- smm(mean, var)
results
mean <- c(10, 15, 20)
var <- c(4, 9, 16)
cor_mat <- matrix(c(
1, 0.5, 0.3,
0.5, 1, 0.4,
0.3, 0.4, 1
), nrow = 3, byrow = TRUE)
results <- smm(mean, var, cor_mat)
task_variances <- c(4 + 9 + 16)
cov_matrix <- matrix(0, nrow = 3, ncol = 3)
for (i in 1:3) {
for (j in 1:3) {
cov_matrix[i, j] <- cor_mat[i, j] * sqrt(task_variances[i] * task_variances[j])
}
}
cov_matrix
cov_matrix <- matrix(0, nrow = 3, ncol = 3)
cov_matrix
task_variances <- c(2^2, (5^2 + 15^2 + 10^2 - 5*15 - 5*10 - 15*10) / 18,
(12 - 8)^2 / 12, ((20 - 5)^2) / 36, 0.7 * 0.3)
task_variances
for (i in 1:3) {
for (j in 1:3) {
cov_matrix[i, j] <- cor_mat[i, j] * sqrt(task_variances[i] * task_variances[j])
}
}
cov_matrix
# Install the necessary package if not already installed
# install.packages("hexSticker")
# install.packages("ggplot2")
library(hexSticker)
library(ggplot2)
# Create a simple bar chart for the sticker
plot <- ggplot(data.frame(x = factor(c("Low", "Medium", "High")), y = c(0.3, 0.5, 0.4)), aes(x, y)) +
geom_bar(stat = "identity", fill = c("green", "yellow", "red")) +
theme_void() +
theme_transparent() +
theme(legend.position = "none")
# Create the sticker
sticker(plot,
package = "PRA",
p_size = 20,        # Package name font size
s_size = 10,        # Subtitle font size
s_x = 1,            # Subtitle x position
s_y = 0.6,          # Subtitle y position
s_color = "darkblue",  # Subtitle color
h_fill = "lightblue",  # Hexagon fill color
h_color = "black",     # Hexagon border color
p_color = "darkblue",  # Package name color
filename = "pra_hex_sticker.png")
# Display the sticker
sticker
source("~/Documents/PRA/inst/hexSticker.R")
usethis::use_cran_badge()
usethis::use_coverage(type = "codecov")
usethis::use_test("mcs.R")
set.seed(123)  # For reproducibility
task_dists <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 10, c = 15),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12),  # Task C: Uniform distribution
)
task_distributions <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 10, c = 15),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
results <- mcs(num_simulations, task_distributions)
results <- mcs(num_simulations, task_distributions)
usethis::use_test("mcs.R")
usethis::use_test("contingency.R")
generate_simulation_results <- function() {
set.seed(123) # Set seed for reproducibility
num_sims <- 1000
total_distribution <- rnorm(num_sims, mean = 100, sd = 15)
list(total_distribution = total_distribution)
}
sims <- generate_simulation_results()
result <- contingency(sims)
result
num_sims <- 10000
task_dists <- list(
list(type = "normal", mean = 10, sd = 2),  # Task A: Normal distribution
list(type = "triangular", a = 5, b = 10, c = 15),  # Task B: Triangular distribution
list(type = "uniform", min = 8, max = 12)  # Task C: Uniform distribution
)
results <- mcs(num_sims, task_dists)
cor_mat <- matrix(c(
1, 0.5, 0.3,
0.5, 1, 0.4,
0.3, 0.4, 1
), nrow = 3, byrow = TRUE)
results <- mcs(num_sims, task_dists, cor_mat)
contingency <- contingency(results, phigh = 0.95, pbase = 0.50)
contingency
??expect_error
result <- contingency(sims, phigh = 0.50, pbase = 0.50)
result
result <- contingency(sims, phigh = 0.25, pbase = 0.75)
usethis::use_test("sensitivity.R")
usethis::use_test("dsm.R")
sm <- matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2)
rm <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
result <- grandparent_dsm(sm, rm)
is.matrix(result)
dim(result)
result
matrix(c(10, 14, 14, 20), nrow = 2, ncol = 2)
sm <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)
result <- parent_dsm(sm)
result
usethis::use_test("evm.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
usethis::use_logo("inst/logo.png")
usethis::use_github_pages()
pkgdown::build_site()
pkgdown::build_site()
install.packages("minpack.lm")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Example usage
data <- data.frame(time = 1:10, completion = c(5, 15, 40, 60, 70, 75, 80, 85, 90, 95))
fits <- fit_sigmoidal_curves(data, "time", "completion")
predictions <- predict_sigmoidal_curves(fits, seq(min(data$time), max(data$time), length.out = 100))
source("~/.active-rstudio-document")
# Example usage
data <- data.frame(time = 1:10, completion = c(5, 15, 40, 60, 70, 75, 80, 85, 90, 95))
fit <- fit_sigmoidal_curve(data, "time", "completion", "logistic")
predictions <- predict_sigmoidal_curve(fit, seq(min(data$time), max(data$time), length.out = 100), "logistic")
plot_sigmoidal_curve(data, "time", "completion", predictions, "logistic")
fit
?mutate
new_data$pred <- predict(fit, newdata = new_data)
new_data <- data.frame(x = x_range)
fit
x_range <- seq(min(data$time), max(data$time)
x_range <- seq(min(data$time), max(data$time), length.out = 100)
new_data <- data.frame(x = x_range)
new_data$pred <- predict(fit, newdata = new_data)
confint <- predict(fit, newdata = new_data, interval = "confidence")
confint
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
head(data)
head(predictions)
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
p <- ggplot2::ggplot(data, aes_string(x = time, y = completion)) +
ggplot2::geom_point() +
ggplot::geom_line(data = predictions, aes(x = x, y = pred), color = "red") +
ggplot2::labs(title = paste("Fitted", model_type),
x = "time", y = "completion %") +
ggplot2::theme_minimal()
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
p <- ggplot2::ggplot(data, aes_string(x = "time", y = "completion")) +
ggplot2::geom_point() +
ggplot2::geom_line(data = predictions, aes(x = x, y = pred), color = "red") +
ggplot2::labs(title = "Fitted Logistic Model", x = "time", y = "completion %") +
ggplot2::theme_minimal()
p
type(fit)
fit
typeof(fit)
new_data
help(predict)
source("~/Documents/PRA/R/sigmoidal.R")
source("~/Documents/PRA/R/sigmoidal.R")
help("aes")
usethis::use_test()
usethis::use_release_issue()
usethis::use_cran_comments()
usethis::use_github_links()
usethis::use_github_links(overwrite = TRUE)
urlchecker::url_check()
urlchecker::url_check()
urlchecker::url_check()
urlchecker::url_check()
devtools::build_readme()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
help("bibentry")
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::check_win_devel()
source("~/.active-rstudio-document")
help("rgb")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
source("~/Documents/PRA/inst/hexSticker.R")
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
sm <- matrix(c(1, 1, 0, 0, 1, 0, 0, 1, 1), nrow = 3, ncol = 3)
sm
rm <- matrix(c(1, 1, 1, 1, 0, 0), nrow = 2, ncol = 3)
rm
t(rm)
tm <- sm %*% t(rm)
tm
parent_dsm <- sm %*% t(sm)
parent_dsm
grandparent_dsm <- tm %*% t(tm)
grandparent_dsm
T <- matrix(c(1, 2, 0, 1, 2, 0), nrow = 3, ncol = 2)
T
G <- matrix(c(2, 2, 0, 2, 2, 0, 0, 0, 0), nrow = 3, ncol = 3)
G
S <- matrix(c(1, 1, 0, 0, 1, 0, 0, 1, 1), nrow = 3, ncol = 3)
R <- matrix(c(1, 1, 1, 1, 0, 0), nrow = 2, ncol = 3)
S
R
t <- S %*% t(R)
t
t %*% t(t)
T <- matrix(c(1, 2, 0, 1, 2, 0), nrow = 3, ncol = 2)
G <- T %*% t(T)
G
# Define the matrix T
T <- matrix(c(1, 2, 0, 1, 2, 0), nrow = 3, ncol = 2)
# Derive the matrix G by multiplying T and its transpose
G <- T %*% t(T)
# Print the matrix G
print(G)
# Define the matrix T
T <- matrix(c(1, 2, 0, 1, 2, 0), nrow = 3, ncol = 2)
# Derive the matrix G by multiplying T and its transpose
G <- T * t(T)
G <- matrix(c(2, 4, 0, 4, 8, 0, 0, 0, 0), nrow = 3, ncol = 3)
G
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
usethis::use_github_release()
usethis::use_version('minor')
devtools::submit_cran()
